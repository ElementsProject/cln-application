import * as crypto from 'crypto';
import WebSocket from 'ws';
import fs from 'fs';

export enum Environment {
  PRODUCTION = 'production',
  TESTING = 'testing',
  DEVELOPMENT = 'development',
}

export enum AppConnect {
  COMMANDO = 'COMMANDO',
  REST = 'REST',
  GRPC = 'GRPC',
}

export enum HttpStatusCode {
  GET_OK = 200,
  POST_OK = 201,
  DELETE_OK = 204,
  BAD_REQUEST = 400,
  UNAUTHORIZED = 401,
  BAD_CSRF_TOKEN = 403,
  NOT_FOUND = 404,
  ACCESS_DENIED = 406,
  ADDR_IN_USE = 409,
  INVALID_DATA = 421,
  INTERNAL_SERVER = 500,
  BITCOIN_SERVER = 520,
  LIGHTNING_SERVER = 521,
  GRPC_UNKNOWN = 552,
}

export const SECRET_KEY = crypto.randomBytes(64).toString('hex');

export const DEFAULT_ENV_VALUES = {
  APP_SINGLE_SIGN_ON: 'false',
  BITCOIN_NETWORK: 'bitcoin',
  APP_PROTOCOL: 'http',
  APP_HOST: 'localhost',
  APP_PORT: '2103',
  APP_CONFIG_FILE: './config.json',
  APP_LOG_FILE: './application-cln.log',
  APP_MODE: Environment.PRODUCTION,
  APP_CONNECT: AppConnect.COMMANDO,
  LIGHTNING_DATA_DIR: '',
  LIGHTNING_HOST: 'localhost',
  LIGHTNING_TOR_HOST: '',
  LIGHTNING_VARS_FILE: './.commando-env',
  LIGHTNING_WS_PROTOCOL: 'ws',
  LIGHTNING_WS_PORT: 5001,
  LIGHTNING_WS_CLIENT_KEY_FILE: './client-key.pem',
  LIGHTNING_WS_CLIENT_CERT_FILE: './client.pem',
  LIGHTNING_WS_CA_CERT_FILE: './ca.pem',
  LIGHTNING_REST_PROTOCOL: 'https',
  LIGHTNING_REST_HOST: 'localhost',
  LIGHTNING_REST_TOR_HOST: '',
  LIGHTNING_REST_PORT: 3010,
  LIGHTNING_REST_CLIENT_KEY_FILE: './client-key.pem',
  LIGHTNING_REST_CLIENT_CERT_FILE: './client.pem',
  LIGHTNING_REST_CA_CERT_FILE: './ca.pem',
  LIGHTNING_GRPC_HOST: 'localhost',
  LIGHTNING_GRPC_TOR_HOST: '',
  LIGHTNING_GRPC_PORT: 9736,
  LIGHTNING_GRPC_PROTO_PATH:
    'https://github.com/ElementsProject/lightning/tree/master/cln-grpc/proto',
  LIGHTNING_GRPC_CLIENT_KEY_FILE: './client-key.pem',
  LIGHTNING_GRPC_CLIENT_CERT_FILE: './client.pem',
  LIGHTNING_GRPC_CA_CERT_FILE: './ca.pem',
};

export const APP_CONSTANTS = {
  APP_SINGLE_SIGN_ON: process.env.APP_SINGLE_SIGN_ON || DEFAULT_ENV_VALUES.APP_SINGLE_SIGN_ON,
  BITCOIN_NETWORK: process.env.BITCOIN_NETWORK || DEFAULT_ENV_VALUES.BITCOIN_NETWORK,
  APP_PROTOCOL: process.env.APP_PROTOCOL || DEFAULT_ENV_VALUES.APP_PROTOCOL,
  APP_HOST: process.env.APP_HOST || DEFAULT_ENV_VALUES.APP_HOST,
  APP_PORT: process.env.APP_PORT || DEFAULT_ENV_VALUES.APP_PORT,
  APP_CONFIG_FILE: process.env.APP_CONFIG_FILE || DEFAULT_ENV_VALUES.APP_CONFIG_FILE,
  APP_LOG_FILE: process.env.APP_LOG_FILE || DEFAULT_ENV_VALUES.APP_LOG_FILE,
  APP_MODE: process.env.APP_MODE || DEFAULT_ENV_VALUES.APP_MODE,
  APP_CONNECT: process.env.APP_CONNECT || DEFAULT_ENV_VALUES.APP_CONNECT,
  LIGHTNING_DATA_DIR: process.env.LIGHTNING_DATA_DIR || DEFAULT_ENV_VALUES.LIGHTNING_DATA_DIR,
  LIGHTNING_HOST: process.env.LIGHTNING_HOST || DEFAULT_ENV_VALUES.LIGHTNING_HOST,
  LIGHTNING_TOR_HOST: process.env.LIGHTNING_TOR_HOST || DEFAULT_ENV_VALUES.LIGHTNING_TOR_HOST,
  LIGHTNING_VARS_FILE: process.env.LIGHTNING_VARS_FILE || DEFAULT_ENV_VALUES.LIGHTNING_VARS_FILE,
  LIGHTNING_WS_PROTOCOL:
    process.env.LIGHTNING_WS_PROTOCOL || DEFAULT_ENV_VALUES.LIGHTNING_WS_PROTOCOL,
  LIGHTNING_WS_PORT: +(process.env.LIGHTNING_WS_PORT || DEFAULT_ENV_VALUES.LIGHTNING_WS_PORT),
  LIGHTNING_WS_CLIENT_KEY_FILE:
    process.env.LIGHTNING_WS_CLIENT_KEY_FILE || DEFAULT_ENV_VALUES.LIGHTNING_WS_CLIENT_KEY_FILE,
  LIGHTNING_WS_CLIENT_CERT_FILE:
    process.env.LIGHTNING_WS_CLIENT_CERT_FILE || DEFAULT_ENV_VALUES.LIGHTNING_WS_CLIENT_CERT_FILE,
  LIGHTNING_WS_CA_CERT_FILE:
    process.env.LIGHTNING_WS_CA_CERT_FILE || DEFAULT_ENV_VALUES.LIGHTNING_WS_CA_CERT_FILE,
  LIGHTNING_REST_PROTOCOL:
    process.env.LIGHTNING_REST_PROTOCOL || DEFAULT_ENV_VALUES.LIGHTNING_REST_PROTOCOL,
  LIGHTNING_REST_HOST: process.env.LIGHTNING_REST_HOST || DEFAULT_ENV_VALUES.LIGHTNING_REST_HOST,
  LIGHTNING_REST_TOR_HOST:
    process.env.LIGHTNING_REST_TOR_HOST || DEFAULT_ENV_VALUES.LIGHTNING_REST_TOR_HOST,
  LIGHTNING_REST_PORT: +(process.env.LIGHTNING_REST_PORT || DEFAULT_ENV_VALUES.LIGHTNING_REST_PORT),
  LIGHTNING_REST_CLIENT_KEY_FILE:
    process.env.LIGHTNING_REST_CLIENT_KEY_FILE || DEFAULT_ENV_VALUES.LIGHTNING_REST_CLIENT_KEY_FILE,
  LIGHTNING_REST_CLIENT_CERT_FILE:
    process.env.LIGHTNING_REST_CLIENT_CERT_FILE ||
    DEFAULT_ENV_VALUES.LIGHTNING_REST_CLIENT_CERT_FILE,
  LIGHTNING_REST_CA_CERT_FILE:
    process.env.LIGHTNING_REST_CA_CERT_FILE || DEFAULT_ENV_VALUES.LIGHTNING_REST_CA_CERT_FILE,
  LIGHTNING_GRPC_HOST: process.env.LIGHTNING_GRPC_HOST || DEFAULT_ENV_VALUES.LIGHTNING_GRPC_HOST,
  LIGHTNING_GRPC_TOR_HOST:
    process.env.LIGHTNING_GRPC_TOR_HOST || DEFAULT_ENV_VALUES.LIGHTNING_GRPC_TOR_HOST,
  LIGHTNING_GRPC_PORT: +(process.env.LIGHTNING_GRPC_PORT || DEFAULT_ENV_VALUES.LIGHTNING_GRPC_PORT),
  LIGHTNING_GRPC_PROTO_PATH: encodeURIComponent(
    process.env.LIGHTNING_GRPC_PROTO_PATH || DEFAULT_ENV_VALUES.LIGHTNING_GRPC_PROTO_PATH,
  ),
  LIGHTNING_GRPC_CLIENT_KEY_FILE:
    process.env.LIGHTNING_GRPC_CLIENT_KEY_FILE || DEFAULT_ENV_VALUES.LIGHTNING_GRPC_CLIENT_KEY_FILE,
  LIGHTNING_GRPC_CLIENT_CERT_FILE:
    process.env.LIGHTNING_GRPC_CLIENT_CERT_FILE ||
    DEFAULT_ENV_VALUES.LIGHTNING_GRPC_CLIENT_CERT_FILE,
  LIGHTNING_GRPC_CA_CERT_FILE:
    process.env.LIGHTNING_GRPC_CA_CERT_FILE || DEFAULT_ENV_VALUES.LIGHTNING_GRPC_CA_CERT_FILE,
  // Not added by the user
  APP_VERSION: '',
  NODE_PUBKEY: '',
  ADMIN_RUNE: '',
  INVOICE_RUNE: '',
  LIGHTNING_WS_TLS_CERTS: '',
  LIGHTNING_REST_TLS_CERTS: '',
  LIGHTNING_GRPC_TLS_CERTS: '',
};

export const DEFAULT_CONFIG = {
  unit: 'SATS',
  fiatUnit: 'USD',
  appMode: 'DARK',
  isLoading: false,
  error: null,
  singleSignOn: false,
  password: '',
};

class SecureWebSocket extends WebSocket {
  constructor(url: string) {
    const options = {
      rejectUnauthorized: false,
      cert: fs.readFileSync(APP_CONSTANTS.LIGHTNING_WS_CLIENT_CERT_FILE),
      key: fs.readFileSync(APP_CONSTANTS.LIGHTNING_WS_CLIENT_KEY_FILE),
    };
    super(url, options);
  }
}

if (
  APP_CONSTANTS.LIGHTNING_WS_PROTOCOL === 'wss' &&
  typeof (globalThis as any).WebSocket === 'undefined'
) {
  (globalThis as any).WebSocket = SecureWebSocket;
}

export const LN_MESSAGE_CONFIG = {
  remoteNodePublicKey: '',
  wsProxy:
    APP_CONSTANTS.LIGHTNING_WS_PROTOCOL +
    '://' +
    APP_CONSTANTS.LIGHTNING_HOST +
    ':' +
    APP_CONSTANTS.LIGHTNING_WS_PORT,
  ip: APP_CONSTANTS.LIGHTNING_HOST,
  port: APP_CONSTANTS.LIGHTNING_WS_PORT,
  privateKey: crypto.randomBytes(32).toString('hex'),
  socket: (url: string) =>
    APP_CONSTANTS.LIGHTNING_WS_PROTOCOL === 'wss' ? new SecureWebSocket(url) : new WebSocket(url),
  logger: {
    info: APP_CONSTANTS.APP_MODE === Environment.PRODUCTION ? () => {} : console.info,
    warn: APP_CONSTANTS.APP_MODE === Environment.PRODUCTION ? () => {} : console.warn,
    error: console.error,
  },
  wssClientKey: '',
  wssClientCert: '',
  wssCaCert: '',
};

export const REST_CONFIG = {
  protocol: APP_CONSTANTS.LIGHTNING_REST_PROTOCOL,
  ip: APP_CONSTANTS.LIGHTNING_REST_HOST,
  port: APP_CONSTANTS.LIGHTNING_REST_PORT,
  url:
    APP_CONSTANTS.LIGHTNING_REST_PROTOCOL +
    '://' +
    APP_CONSTANTS.LIGHTNING_REST_HOST +
    ':' +
    APP_CONSTANTS.LIGHTNING_REST_PORT,
  rune: '',
  restClientKey: '',
  restClientCert: '',
  restCaCert: '',
};

export const GRPC_CONFIG = {
  pubkey: APP_CONSTANTS.NODE_PUBKEY,
  ip: APP_CONSTANTS.LIGHTNING_GRPC_HOST,
  port: APP_CONSTANTS.LIGHTNING_GRPC_PORT,
  url: 'https://' + APP_CONSTANTS.LIGHTNING_GRPC_HOST + ':' + APP_CONSTANTS.LIGHTNING_GRPC_PORT,
  protoPath: APP_CONSTANTS.LIGHTNING_GRPC_PROTO_PATH,
  grpcClientKey: '',
  grpcClientCert: '',
  grpcCaCert: '',
};

export const API_VERSION = '/v1';
export const FIAT_RATE_API = 'https://green-bitcoin-mainnet.blockstream.com/prices/v0/venues/';
export const FIAT_VENUES: any = {
  USD: 'KRAKEN',
  EUR: 'KRAKEN',
  NZD: 'KIWICOIN',
};
