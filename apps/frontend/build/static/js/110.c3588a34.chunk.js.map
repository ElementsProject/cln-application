{"version":3,"file":"static/js/110.c3588a34.chunk.js","mappings":"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","sources":["components/greenlight/GLHeader/GLHeader.tsx","components/greenlight/CapacityCard/CapacityCard.tsx","components/greenlight/PaymentsList/PaymentsList.tsx","components/greenlight/GLHome/GLHome.tsx"],"sourcesContent":["import React from 'react';\n\nimport './GLHeader.scss';\nimport { useContext } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Row, Col, Image, OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport useHttp from '../../../hooks/use-http';\nimport useBreakpoint from '../../../hooks/use-breakpoint';\nimport { ApplicationModes, Breakpoints } from '../../../utilities/constants';\nimport { DayModeSVG } from '../../../svgs/DayMode';\nimport { NightModeSVG } from '../../../svgs/NightMode';\nimport { LogoutSVG } from '../../../svgs/Logout';\nimport Settings from '../../ui/Settings/Settings';\nimport { RootContext } from '../../../store/RootContext';\nimport { GLContext } from '../../../store/GLContext';\n\nconst GLHeader = (props) => {\n  const rootCtx = useContext(RootContext);\n  const glCtx = useContext(GLContext);\n  const currentScreenSize = useBreakpoint();\n  const { updateConfig } = useHttp();\n\n  const modeChangeHandler = (event: any) => {\n    updateConfig({\n      ...rootCtx.appConfig,\n      uiConfig: {\n        ...rootCtx.appConfig.uiConfig,\n        appMode: (rootCtx.appConfig.uiConfig.appMode === ApplicationModes.DARK ? ApplicationModes.LIGHT : ApplicationModes.DARK),\n      },\n    });\n  };\n\n  const logoutHandler = (event: any) => {\n    rootCtx.setShowModals({ ...rootCtx.showModals, logoutModal: true });\n  }\n\n  if (currentScreenSize === Breakpoints.XS || currentScreenSize === Breakpoints.SM) {\n    return (\n      <Row className='header mb-5 mx-1' data-testid='gl-header'>\n        <Col xs={12} data-testid='header-info'>\n          <AnimatePresence>\n            <motion.img\n              key='cln-logo'\n              alt='Core Lightning Logo'\n              src={rootCtx.appConfig.uiConfig.appMode === ApplicationModes.DARK ? '/images/cln-logo-dark.png' : '/images/cln-logo-light.png'}\n              className='header-info-logo me-3 rounded float-start'\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.05, duration: 0.01 }}\n          />\n          </AnimatePresence>\n          <Col className='h-100 d-flex align-items-center justify-content-between'>\n            <h4 className='m-0 text-dark'><strong>CLN</strong></h4>\n            <div className='d-flex align-items-center'>\n              <Settings compact={true} onShowConnectWallet={props.onShowConnectWallet} />\n              { rootCtx.appConfig.serverConfig.singleSignOn === true ?\n                <span className='mx-2'></span>\n                :\n                <div onClick={logoutHandler}>\n                  <LogoutSVG className='svg-logout mx-2 cursor-pointer' />\n                </div>\n              }\n              <div onClick={modeChangeHandler}>\n                {(rootCtx.appConfig.uiConfig.appMode === ApplicationModes.DARK) ? <NightModeSVG className='svg-night me-2' /> : <DayModeSVG className='svg-day me-2' />}\n              </div>\n            </div>\n          </Col>\n          <Row className='header-info-text my-2'>\n            <Col xs={12} className='d-flex align-items-center text-light'>\n            { rootCtx.authStatus.isAuthenticated && glCtx.nodeInfo.isLoading ? \n                <>\n                  <OverlayTrigger\n                    placement='auto'\n                    delay={{ show: 250, hide: 250 }}\n                    overlay={<Tooltip>Loading</Tooltip>}\n                    >\n                    <span className='d-inline-block mx-2 dot bg-warning'></span>\n                  </OverlayTrigger>\n                  <span className='fs-7'>Loading...</span>\n                </>\n              : \n              glCtx.nodeInfo.error ? \n                  <>\n                    <OverlayTrigger\n                      placement='auto'\n                      delay={{ show: 250, hide: 250 }}\n                      overlay={<Tooltip>Error</Tooltip>}\n                      >\n                      <span className='d-inline-block mx-2 dot bg-danger'></span>\n                    </OverlayTrigger>\n                    <span className='fs-7'>{('Error: ' + glCtx.nodeInfo.error)}</span>\n                  </>\n                : \n                  <>\n                    <OverlayTrigger\n                      placement='auto'\n                      delay={{ show: 250, hide: 250 }}\n                      overlay={<Tooltip>Connected</Tooltip>}\n                      >\n                      <span className='d-inline-block mx-2 dot bg-success'></span>\n                    </OverlayTrigger>\n                    <span className='fs-7'>{glCtx.nodeInfo.alias + ' (' + glCtx.nodeInfo.version + ')'}</span>\n                  </>\n            }\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <Row className='header mb-4 mx-1' data-testid='header'>\n      <Col xs={12} lg={8} data-testid='header-info'>\n        <Image src={rootCtx.appConfig.uiConfig.appMode === ApplicationModes.DARK ? '/images/cln-logo-dark.png' : '/images/cln-logo-light.png'} className='header-info-logo me-3 rounded float-start' alt='Core Lightning Logo' />\n        <Row className='header-info-text mt-3'>\n          {(currentScreenSize !== Breakpoints.MD) ?\n            <h4 className='m-0 text-dark'><strong>Core Lightning Node</strong></h4>\n          : \n            <Col xs={12} lg={4} className='d-flex align-items-center justify-content-between' data-testid='header-context'>\n              <h4 className='m-0 text-dark'><strong>Core Lightning Node</strong></h4>\n              <div className='d-flex align-items-center'>\n                <Settings onShowConnectWallet={props.onShowConnectWallet} />\n                { rootCtx.appConfig.serverConfig.singleSignOn === true ?\n                  <span className='mx-2'></span>\n                  :\n                  <div onClick={logoutHandler}>\n                    <LogoutSVG className='svg-logout mx-3 cursor-pointer' />\n                  </div>\n                }\n                <div onClick={modeChangeHandler}>\n                  {(rootCtx.appConfig.uiConfig.appMode === ApplicationModes.DARK) ? <NightModeSVG className='svg-night me-2' /> : <DayModeSVG className='svg-day me-2' />}\n                </div>\n              </div>\n            </Col>\n          }\n          <Col xs={12} className='d-flex align-items-center text-light'>\n            { rootCtx.authStatus.isAuthenticated && glCtx.nodeInfo.isLoading ? \n                <>\n                  <OverlayTrigger\n                    placement='auto'\n                    delay={{ show: 250, hide: 250 }}\n                    overlay={<Tooltip>Loading</Tooltip>}\n                    >\n                    <span className='d-inline-block me-2 dot bg-warning'></span>\n                  </OverlayTrigger>\n                  <span className='fs-7'>Loading...</span>\n                </>\n              : \n              glCtx.nodeInfo.error ? \n                <>\n                  <OverlayTrigger\n                    placement='auto'\n                    delay={{ show: 250, hide: 250 }}\n                    overlay={<Tooltip>Error</Tooltip>}\n                    >\n                    <span className='d-inline-block me-2 dot bg-danger'></span>\n                  </OverlayTrigger>\n                  <span className='fs-7'>{('Error: ' + glCtx.nodeInfo.error)}</span>\n                </>\n              : \n                <>\n                  <OverlayTrigger\n                    placement='auto'\n                    delay={{ show: 250, hide: 250 }}\n                    overlay={<Tooltip>Connected</Tooltip>}\n                    >\n                    <span className='d-inline-block me-2 dot bg-success'></span>\n                  </OverlayTrigger>\n                  <span className='fs-7'>{glCtx.nodeInfo.alias + ' (' + glCtx.nodeInfo.version + ')'}</span> \n                </>\n            }\n          </Col>\n        </Row>\n      </Col>\n      {(currentScreenSize !== Breakpoints.MD) ?\n        <Col xs={12} lg={4} className='d-flex align-items-center justify-content-end' data-testid='header-context'>\n          <div className='d-flex align-items-center'>\n            <Settings onShowConnectWallet={props.onShowConnectWallet} />\n            { rootCtx.appConfig.serverConfig.singleSignOn === true ?\n              <span className='mx-2'></span>\n              :\n              <div onClick={logoutHandler}>\n                <LogoutSVG className='svg-logout mx-3 cursor-pointer' />\n              </div>\n            }\n            <div onClick={modeChangeHandler}>\n              {(rootCtx.appConfig.uiConfig.appMode === ApplicationModes.DARK) ? <NightModeSVG className='svg-night me-2' /> : <DayModeSVG className='svg-day me-2'/>}\n            </div>\n          </div>\n        </Col>\n      :\n        <></>\n      }\n    </Row>\n  );\n}\n\nexport default GLHeader;\n","import React from 'react';\n\nimport './CapacityCard.scss';\nimport { Card, Button } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\n\nconst CapacityCard = (props) => {\n  const navigate = useNavigate();\n\n  return (\n    <Card className='h-100 d-flex align-items-stretch' data-testid='capacity-card'>\n      <Card.Body className='bg-primary capacity-card'></Card.Body>\n      <Card.Footer className='d-flex justify-content-center'>\n        <Button tabIndex={4} type='button' variant='primary' className='btn-rounded' onClick={() => navigate('./lsps')} >\n          Top-Up\n        </Button>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nexport default CapacityCard;\n","import React from 'react';\n\nimport './PaymentsList.scss';\n\nexport const PaymentsList = () => {\n  return (<h5 data-testid='payments-list'>Payments List</h5>)\n};\n\nexport default PaymentsList;\n","import React, { useContext } from 'react';\n\nimport './GLHome.scss';\nimport { Row, Col } from 'react-bootstrap';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { Loading } from '../../ui/Loading/Loading';\nimport GLHeader from '../GLHeader/GLHeader';\nimport CapacityCard from '../CapacityCard/CapacityCard';\nimport PaymentsList from '../PaymentsList/PaymentsList';\nimport { GLContext } from '../../../store/GLContext';\nimport { RootContext } from '../../../store/RootContext';\n\nfunction GLHome() {\n  const location = useLocation();\n  const rootCtx = useContext(RootContext);\n  const glCtx = useContext(GLContext);\n\n  if (rootCtx.authStatus.isAuthenticated && glCtx.nodeInfo.isLoading) {\n    return (<Loading />);\n  }\n\n  if (glCtx.nodeInfo.error) {\n    return (\n      <Row className='message invalid mt-10'>\n        <Col xs={12} className='d-flex align-items-center justify-content-center'>\n          {glCtx.nodeInfo.error}\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <>\n      <div data-testid='gl-container'>\n        <GLHeader />\n        <Outlet />\n      </div>\n      {location.pathname === '/gl' && (\n        <>\n        <Row className='px-3'>\n          <Col xs={12} lg={6}>\n            <CapacityCard direction='receive' />\n          </Col>\n          <Col xs={12} lg={6}>\n            <CapacityCard direction='send' />\n          </Col>\n        </Row>\n        <Row className='px-3'>\n          <Col xs={12} className='cards-container'>\n            <PaymentsList />\n          </Col>\n        </Row>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default GLHome;\n"],"names":["props","rootCtx","useContext","RootContext","glCtx","GLContext","currentScreenSize","useBreakpoint","updateConfig","useHttp","modeChangeHandler","event","appConfig","uiConfig","appMode","ApplicationModes","DARK","LIGHT","logoutHandler","setShowModals","showModals","logoutModal","Breakpoints","XS","SM","_jsx","Row","className","children","_jsxs","Col","xs","AnimatePresence","motion","img","alt","src","initial","opacity","animate","transition","delay","duration","Settings","compact","onShowConnectWallet","serverConfig","singleSignOn","onClick","LogoutSVG","NightModeSVG","DayModeSVG","authStatus","isAuthenticated","nodeInfo","isLoading","_Fragment","OverlayTrigger","placement","show","hide","overlay","Tooltip","error","alias","version","lg","Image","MD","navigate","useNavigate","Card","Body","Footer","Button","tabIndex","type","variant","PaymentsList","location","useLocation","Loading","GLHeader","Outlet","pathname","CapacityCard","direction"],"sourceRoot":""}